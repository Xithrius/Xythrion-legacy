name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  flake8:
    name: Flake8 linting
    runs-on: ubuntu-latest

    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      POETRY_VIRTUALENVS_CREATE: false
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
      PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      - name: Install dependencies using poetry
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi

      - name: Pre-commit Environment Caching
        uses: actions/cache@v2
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: "precommit-0-${{ runner.os }}-${{ env.PRE_COMMIT_HOME }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./.pre-commit-config.yaml') }}"

      - name: Run pre-commit hooks
        run: export PIP_USER=0; SKIP=flake8 pre-commit run --all-files

      - name: Run flake8
        run: "flake8 --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"

  cargo-build-test:
    name: Cargo building & testing
    steps:
      - uses: actions/checkout@v2

      - name: Build
        run: cargo build --verbose --manifest-path ./webserver/Cargo.toml

      - name: Run tests
        run: cargo test --verbose --manifest-path ./webserver/Cargo.toml

  cargo-fmt:
    name: Cargo format checking

    needs: build-test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt
          rustup component add clippy

      - name: Check formatting
        run: cargo fmt --all -- --check --manifest-path ./webserver/Cargo.toml

      - name: Check code for possible improvements
        run: cargo clippy -- -D warnings --manifest-path ./webserver/Cargo.toml
